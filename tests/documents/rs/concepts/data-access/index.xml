<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Access Architecture on Redis Labs Documentation Center</title>
    <link>/rs/concepts/data-access/</link>
    <description>Recent content in Data Access Architecture on Redis Labs Documentation Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/rs/concepts/data-access/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Consistency and Durability</title>
      <link>/rs/concepts/data-access/consistency-durability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/rs/concepts/data-access/consistency-durability/</guid>
      <description>Redis Enterprise Software (RS) comes with the ability to replicate data to another slave for high availability and persist in-memory data on disk permanently for durability. With the new WAIT command, you can control the consistency and durability guarantees for the replicated and persisted database in RS.
Any updates that are issued to the database are typically performed with the following flow shown below;
 Application issues a write, Proxy communicates with the correct master &amp;ldquo;shard&amp;rdquo; in the system that contains the given key, The acknowledgment is sent to proxy once the write operation completes The proxy sends the acknowledgment back to the application.</description>
    </item>
    
    <item>
      <title>Database Persistence with Redis Enterprise Software</title>
      <link>/rs/concepts/data-access/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/rs/concepts/data-access/persistence/</guid>
      <description>All data is stored and managed exclusively in either RAM or RAM + Flash Memory (Redis on Flash) and therefore, is at risk of being lost upon a process or server failure. As Redis Enterprise Software is not just a caching solution, but also a full-fledged database, persistence to disk is critical. Therefore, Redis Enterprise Software supports persisting data to disk on a per-database basis and in multiple ways.
There are two options for persistence:</description>
    </item>
    
    <item>
      <title>Discovery Service</title>
      <link>/rs/concepts/data-access/discovery-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/rs/concepts/data-access/discovery-service/</guid>
      <description>The Discovery Service provides an IP-based connection management service used when connecting to Redis Enterprise Software databases. When used in conjunction with Redis Enterprise Software&amp;rsquo;s other high availability features, the Discovery Service assists an application cope with topology changes such as adding, removing of nodes, node failovers and so on. It does this by providing your application with the ability to easily discover which node hosts the database endpoint. The API used for discovery service is compliant with the Redis Sentinel API.</description>
    </item>
    
    <item>
      <title>Redis OSS Cluster API Architecture</title>
      <link>/rs/concepts/data-access/oss-cluster-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/rs/concepts/data-access/oss-cluster-api/</guid>
      <description>Redis OSS Cluster API reduces access times and latency with near-linear scalability. The Redis OSS Cluster API provides a simple mechanism for Redis clients to know the cluster topology.
Clients must first connect to the master node to get the cluster topology, and then they connect directly to the Redis proxy on each node that hosts a master shard.
 Note -  You must use a client that supports the OSS cluster API to connect to a database that has the OSS cluster API enabled.</description>
    </item>
    
  </channel>
</rss>